model:
  model_name: academic 
  academic:
    task: segmentation
    model_type: Unet
    config_path: "./semantic_2d_segmentation.yaml"
data:
  data_path: "data/mmv_im2im/denoise/test/im"
  input_size: [1,128,128]
  dynamic_batch: [1,4,8] # min, opt, max
  io:
    input_names: ['input']
    output_names: ['output']
quantization:
  type: PTQ # could be PTQ or QAT
  backend: openvino # tensorrt or openvino
  run_mode: int4 #int4, int8 or fp32
  extra_config:
    extra_qconfig_dict: 
      w_observer: EMAQuantileObserver
      a_observer: EMAQuantileObserver
      w_fakequantize: LearnableFakeQuantize
      a_fakequantize: LearnableFakeQuantize
      w_qscheme: 
        bit: 4
        symmetry: True
        per_channel: False  # Quantile observer only support in per-tensor scheme
        pot_scale: False
      a_qscheme: 
        bit: 4
        symmetry: True
        per_channel: False
        pot_scale: False
    extra_quantizer_dict:
      additional_function_type: 
        - torch.cat
# prune:
#   type: L1NormPruner # could be LevelPruner, L1NormPruner, L2NormPruner, FPGMPruner
#   config_list:
#     - sparsity_per_layer: 0.5
#       op_types: 
#         - Conv2d
#         - Linear
#     - exclude: True  # exclude the output layer from being pruned.
#       op_names:
#         - outc.conv

#   customized_replace_func: {}